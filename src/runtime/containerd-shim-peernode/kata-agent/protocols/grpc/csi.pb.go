// Copyright (c) 2022 Databricks Inc.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.14.0
// source: csi.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VolumeUsage_Unit int32

const (
	VolumeUsage_UNKNOWN VolumeUsage_Unit = 0
	VolumeUsage_BYTES   VolumeUsage_Unit = 1
	VolumeUsage_INODES  VolumeUsage_Unit = 2
)

// Enum value maps for VolumeUsage_Unit.
var (
	VolumeUsage_Unit_name = map[int32]string{
		0: "UNKNOWN",
		1: "BYTES",
		2: "INODES",
	}
	VolumeUsage_Unit_value = map[string]int32{
		"UNKNOWN": 0,
		"BYTES":   1,
		"INODES":  2,
	}
)

func (x VolumeUsage_Unit) Enum() *VolumeUsage_Unit {
	p := new(VolumeUsage_Unit)
	*p = x
	return p
}

func (x VolumeUsage_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeUsage_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_csi_proto_enumTypes[0].Descriptor()
}

func (VolumeUsage_Unit) Type() protoreflect.EnumType {
	return &file_csi_proto_enumTypes[0]
}

func (x VolumeUsage_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeUsage_Unit.Descriptor instead.
func (VolumeUsage_Unit) EnumDescriptor() ([]byte, []int) {
	return file_csi_proto_rawDescGZIP(), []int{1, 0}
}

// This should be kept in sync with CSI NodeGetVolumeStatsResponse (https://github.com/container-storage-interface/spec/blob/v1.5.0/csi.proto)
type VolumeStatsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This field is OPTIONAL.
	Usage []*VolumeUsage `protobuf:"bytes,1,rep,name=usage,proto3" json:"usage,omitempty"`
	// Information about the current condition of the volume.
	// This field is OPTIONAL.
	// This field MUST be specified if the VOLUME_CONDITION node
	// capability is supported.
	VolumeCondition *VolumeCondition `protobuf:"bytes,2,opt,name=volume_condition,json=volumeCondition,proto3" json:"volume_condition,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VolumeStatsResponse) Reset() {
	*x = VolumeStatsResponse{}
	mi := &file_csi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeStatsResponse) ProtoMessage() {}

func (x *VolumeStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_csi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeStatsResponse.ProtoReflect.Descriptor instead.
func (*VolumeStatsResponse) Descriptor() ([]byte, []int) {
	return file_csi_proto_rawDescGZIP(), []int{0}
}

func (x *VolumeStatsResponse) GetUsage() []*VolumeUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *VolumeStatsResponse) GetVolumeCondition() *VolumeCondition {
	if x != nil {
		return x.VolumeCondition
	}
	return nil
}

type VolumeUsage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The available capacity in specified Unit. This field is OPTIONAL.
	// The value of this field MUST NOT be negative.
	Available uint64 `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	// The total capacity in specified Unit. This field is REQUIRED.
	// The value of this field MUST NOT be negative.
	Total uint64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// The used capacity in specified Unit. This field is OPTIONAL.
	// The value of this field MUST NOT be negative.
	Used uint64 `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	// Units by which values are measured. This field is REQUIRED.
	Unit          VolumeUsage_Unit `protobuf:"varint,4,opt,name=unit,proto3,enum=grpc.VolumeUsage_Unit" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeUsage) Reset() {
	*x = VolumeUsage{}
	mi := &file_csi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeUsage) ProtoMessage() {}

func (x *VolumeUsage) ProtoReflect() protoreflect.Message {
	mi := &file_csi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeUsage.ProtoReflect.Descriptor instead.
func (*VolumeUsage) Descriptor() ([]byte, []int) {
	return file_csi_proto_rawDescGZIP(), []int{1}
}

func (x *VolumeUsage) GetAvailable() uint64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *VolumeUsage) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VolumeUsage) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *VolumeUsage) GetUnit() VolumeUsage_Unit {
	if x != nil {
		return x.Unit
	}
	return VolumeUsage_UNKNOWN
}

// VolumeCondition represents the current condition of a volume.
type VolumeCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Normal volumes are available for use and operating optimally.
	// An abnormal volume does not meet these criteria.
	// This field is REQUIRED.
	Abnormal bool `protobuf:"varint,1,opt,name=abnormal,proto3" json:"abnormal,omitempty"`
	// The message describing the condition of the volume.
	// This field is REQUIRED.
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumeCondition) Reset() {
	*x = VolumeCondition{}
	mi := &file_csi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCondition) ProtoMessage() {}

func (x *VolumeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_csi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCondition.ProtoReflect.Descriptor instead.
func (*VolumeCondition) Descriptor() ([]byte, []int) {
	return file_csi_proto_rawDescGZIP(), []int{2}
}

func (x *VolumeCondition) GetAbnormal() bool {
	if x != nil {
		return x.Abnormal
	}
	return false
}

func (x *VolumeCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_csi_proto protoreflect.FileDescriptor

const file_csi_proto_rawDesc = "" +
	"\n" +
	"\tcsi.proto\x12\x04grpc\"\x80\x01\n" +
	"\x13VolumeStatsResponse\x12'\n" +
	"\x05usage\x18\x01 \x03(\v2\x11.grpc.VolumeUsageR\x05usage\x12@\n" +
	"\x10volume_condition\x18\x02 \x01(\v2\x15.grpc.VolumeConditionR\x0fvolumeCondition\"\xad\x01\n" +
	"\vVolumeUsage\x12\x1c\n" +
	"\tavailable\x18\x01 \x01(\x04R\tavailable\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x04R\x05total\x12\x12\n" +
	"\x04used\x18\x03 \x01(\x04R\x04used\x12*\n" +
	"\x04unit\x18\x04 \x01(\x0e2\x16.grpc.VolumeUsage.UnitR\x04unit\"*\n" +
	"\x04Unit\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\t\n" +
	"\x05BYTES\x10\x01\x12\n" +
	"\n" +
	"\x06INODES\x10\x02\"G\n" +
	"\x0fVolumeCondition\x12\x1a\n" +
	"\babnormal\x18\x01 \x01(\bR\babnormal\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessageB]Z[github.com/peernode/peernode/src/runtime/containerd-shim-peernode/kata-agent/protocols/grpcb\x06proto3"

var (
	file_csi_proto_rawDescOnce sync.Once
	file_csi_proto_rawDescData []byte
)

func file_csi_proto_rawDescGZIP() []byte {
	file_csi_proto_rawDescOnce.Do(func() {
		file_csi_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_csi_proto_rawDesc), len(file_csi_proto_rawDesc)))
	})
	return file_csi_proto_rawDescData
}

var file_csi_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_csi_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_csi_proto_goTypes = []any{
	(VolumeUsage_Unit)(0),       // 0: grpc.VolumeUsage.Unit
	(*VolumeStatsResponse)(nil), // 1: grpc.VolumeStatsResponse
	(*VolumeUsage)(nil),         // 2: grpc.VolumeUsage
	(*VolumeCondition)(nil),     // 3: grpc.VolumeCondition
}
var file_csi_proto_depIdxs = []int32{
	2, // 0: grpc.VolumeStatsResponse.usage:type_name -> grpc.VolumeUsage
	3, // 1: grpc.VolumeStatsResponse.volume_condition:type_name -> grpc.VolumeCondition
	0, // 2: grpc.VolumeUsage.unit:type_name -> grpc.VolumeUsage.Unit
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_csi_proto_init() }
func file_csi_proto_init() {
	if File_csi_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_csi_proto_rawDesc), len(file_csi_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_csi_proto_goTypes,
		DependencyIndexes: file_csi_proto_depIdxs,
		EnumInfos:         file_csi_proto_enumTypes,
		MessageInfos:      file_csi_proto_msgTypes,
	}.Build()
	File_csi_proto = out.File
	file_csi_proto_goTypes = nil
	file_csi_proto_depIdxs = nil
}
