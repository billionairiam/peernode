//
// Copyright (c) 2017 Intel Corporation
// Copyright (c) 2019-2020 Ant Group
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.14.0
// source: oci.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the Open Container Initiative Runtime Specification with which the bundle complies.
	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	// Process configures the container process.
	Process *Process `protobuf:"bytes,2,opt,name=Process,proto3" json:"Process,omitempty"`
	// Root configures the container's root filesystem.
	Root *Root `protobuf:"bytes,3,opt,name=Root,proto3" json:"Root,omitempty"`
	// Hostname configures the container's hostname.
	Hostname string `protobuf:"bytes,4,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	// Mounts configures additional mounts (on top of Root).
	Mounts []*Mount `protobuf:"bytes,5,rep,name=Mounts,proto3" json:"Mounts,omitempty"`
	// Hooks configures callbacks for container lifecycle events.
	Hooks *Hooks `protobuf:"bytes,6,opt,name=Hooks,proto3" json:"Hooks,omitempty"`
	// Annotations contains arbitrary metadata for the container.
	Annotations map[string]string `protobuf:"bytes,7,rep,name=Annotations,proto3" json:"Annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Linux is platform-specific configuration for Linux based containers.
	Linux *Linux `protobuf:"bytes,8,opt,name=Linux,proto3" json:"Linux,omitempty"`
	// Solaris is platform-specific configuration for Solaris based containers.
	Solaris *Solaris `protobuf:"bytes,9,opt,name=Solaris,proto3" json:"Solaris,omitempty"`
	// Windows is platform-specific configuration for Windows based containers.
	Windows       *Windows `protobuf:"bytes,10,opt,name=Windows,proto3" json:"Windows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Spec) Reset() {
	*x = Spec{}
	mi := &file_oci_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{0}
}

func (x *Spec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Spec) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *Spec) GetRoot() *Root {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Spec) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Spec) GetMounts() []*Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *Spec) GetHooks() *Hooks {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *Spec) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Spec) GetLinux() *Linux {
	if x != nil {
		return x.Linux
	}
	return nil
}

func (x *Spec) GetSolaris() *Solaris {
	if x != nil {
		return x.Solaris
	}
	return nil
}

func (x *Spec) GetWindows() *Windows {
	if x != nil {
		return x.Windows
	}
	return nil
}

type Process struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Terminal creates an interactive terminal for the container.
	Terminal bool `protobuf:"varint,1,opt,name=Terminal,proto3" json:"Terminal,omitempty"`
	// ConsoleSize specifies the size of the console.
	ConsoleSize *Box `protobuf:"bytes,2,opt,name=ConsoleSize,proto3" json:"ConsoleSize,omitempty"`
	// User specifies user information for the process.
	User *User `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	// Args specifies the binary and arguments for the application to execute.
	Args []string `protobuf:"bytes,4,rep,name=Args,proto3" json:"Args,omitempty"`
	// Env populates the process environment for the process.
	Env []string `protobuf:"bytes,5,rep,name=Env,proto3" json:"Env,omitempty"`
	// Cwd is the current working directory for the process and must be
	// relative to the container's root.
	Cwd string `protobuf:"bytes,6,opt,name=Cwd,proto3" json:"Cwd,omitempty"`
	// Capabilities are Linux capabilities that are kept for the process.
	Capabilities *LinuxCapabilities `protobuf:"bytes,7,opt,name=Capabilities,proto3" json:"Capabilities,omitempty"`
	// Rlimits specifies rlimit options to apply to the process.
	Rlimits []*POSIXRlimit `protobuf:"bytes,8,rep,name=Rlimits,proto3" json:"Rlimits,omitempty"`
	// NoNewPrivileges controls whether additional privileges could be gained by processes in the container.
	NoNewPrivileges bool `protobuf:"varint,9,opt,name=NoNewPrivileges,proto3" json:"NoNewPrivileges,omitempty"`
	// ApparmorProfile specifies the apparmor profile for the container.
	ApparmorProfile string `protobuf:"bytes,10,opt,name=ApparmorProfile,proto3" json:"ApparmorProfile,omitempty"`
	// Specify an oom_score_adj for the container.
	OOMScoreAdj int64 `protobuf:"varint,11,opt,name=OOMScoreAdj,proto3" json:"OOMScoreAdj,omitempty"`
	// SelinuxLabel specifies the selinux context that the container process is run as.
	SelinuxLabel  string `protobuf:"bytes,12,opt,name=SelinuxLabel,proto3" json:"SelinuxLabel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Process) Reset() {
	*x = Process{}
	mi := &file_oci_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{1}
}

func (x *Process) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

func (x *Process) GetConsoleSize() *Box {
	if x != nil {
		return x.ConsoleSize
	}
	return nil
}

func (x *Process) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Process) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Process) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Process) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Process) GetCapabilities() *LinuxCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *Process) GetRlimits() []*POSIXRlimit {
	if x != nil {
		return x.Rlimits
	}
	return nil
}

func (x *Process) GetNoNewPrivileges() bool {
	if x != nil {
		return x.NoNewPrivileges
	}
	return false
}

func (x *Process) GetApparmorProfile() string {
	if x != nil {
		return x.ApparmorProfile
	}
	return ""
}

func (x *Process) GetOOMScoreAdj() int64 {
	if x != nil {
		return x.OOMScoreAdj
	}
	return 0
}

func (x *Process) GetSelinuxLabel() string {
	if x != nil {
		return x.SelinuxLabel
	}
	return ""
}

type Box struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Height is the vertical dimension of a box.
	Height uint32 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	// Width is the horizontal dimension of a box.
	Width         uint32 `protobuf:"varint,2,opt,name=Width,proto3" json:"Width,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Box) Reset() {
	*x = Box{}
	mi := &file_oci_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Box) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box) ProtoMessage() {}

func (x *Box) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box.ProtoReflect.Descriptor instead.
func (*Box) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{2}
}

func (x *Box) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Box) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type User struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UID is the user id.
	UID uint32 `protobuf:"varint,1,opt,name=UID,proto3" json:"UID,omitempty"`
	// GID is the group id.
	GID uint32 `protobuf:"varint,2,opt,name=GID,proto3" json:"GID,omitempty"`
	// AdditionalGids are additional group ids set for the container's process.
	AdditionalGids []uint32 `protobuf:"varint,3,rep,packed,name=AdditionalGids,proto3" json:"AdditionalGids,omitempty"`
	// Username is the user name.
	Username      string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_oci_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *User) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

func (x *User) GetAdditionalGids() []uint32 {
	if x != nil {
		return x.AdditionalGids
	}
	return nil
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type LinuxCapabilities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bounding is the set of capabilities checked by the kernel.
	Bounding []string `protobuf:"bytes,1,rep,name=Bounding,proto3" json:"Bounding,omitempty"`
	// Effective is the set of capabilities checked by the kernel.
	Effective []string `protobuf:"bytes,2,rep,name=Effective,proto3" json:"Effective,omitempty"`
	// Inheritable is the capabilities preserved across execve.
	Inheritable []string `protobuf:"bytes,3,rep,name=Inheritable,proto3" json:"Inheritable,omitempty"`
	// Permitted is the limiting superset for effective capabilities.
	Permitted []string `protobuf:"bytes,4,rep,name=Permitted,proto3" json:"Permitted,omitempty"`
	// Ambient is the ambient set of capabilities that are kept.
	Ambient       []string `protobuf:"bytes,5,rep,name=Ambient,proto3" json:"Ambient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxCapabilities) Reset() {
	*x = LinuxCapabilities{}
	mi := &file_oci_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxCapabilities) ProtoMessage() {}

func (x *LinuxCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxCapabilities.ProtoReflect.Descriptor instead.
func (*LinuxCapabilities) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{4}
}

func (x *LinuxCapabilities) GetBounding() []string {
	if x != nil {
		return x.Bounding
	}
	return nil
}

func (x *LinuxCapabilities) GetEffective() []string {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *LinuxCapabilities) GetInheritable() []string {
	if x != nil {
		return x.Inheritable
	}
	return nil
}

func (x *LinuxCapabilities) GetPermitted() []string {
	if x != nil {
		return x.Permitted
	}
	return nil
}

func (x *LinuxCapabilities) GetAmbient() []string {
	if x != nil {
		return x.Ambient
	}
	return nil
}

type POSIXRlimit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of the rlimit to set
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Hard is the hard limit for the specified type
	Hard uint64 `protobuf:"varint,2,opt,name=Hard,proto3" json:"Hard,omitempty"`
	// Soft is the soft limit for the specified type
	Soft          uint64 `protobuf:"varint,3,opt,name=Soft,proto3" json:"Soft,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *POSIXRlimit) Reset() {
	*x = POSIXRlimit{}
	mi := &file_oci_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *POSIXRlimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*POSIXRlimit) ProtoMessage() {}

func (x *POSIXRlimit) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use POSIXRlimit.ProtoReflect.Descriptor instead.
func (*POSIXRlimit) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{5}
}

func (x *POSIXRlimit) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *POSIXRlimit) GetHard() uint64 {
	if x != nil {
		return x.Hard
	}
	return 0
}

func (x *POSIXRlimit) GetSoft() uint64 {
	if x != nil {
		return x.Soft
	}
	return 0
}

type Mount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// source is the path inside the container expect when it starts with "vm:/dev/" or "tmp:/"
	// the path which starts with "vm:/dev/" refers the guest vm's "/dev",
	// especially, "vm:/dev/hostfs/" refers to the shared filesystem.
	// "tmp:/" is a temporary directory which is used for temporary mounts.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// destination is the path inside the container expect when it starts with "tmp:/"
	Destination   string   `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Options       []string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mount) Reset() {
	*x = Mount{}
	mi := &file_oci_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{6}
}

func (x *Mount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Mount) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Mount) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Mount) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

type Root struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path is the absolute path to the container's root filesystem.
	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	// Readonly makes the root filesystem for the container readonly before the process is executed.
	Readonly      bool `protobuf:"varint,2,opt,name=Readonly,proto3" json:"Readonly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Root) Reset() {
	*x = Root{}
	mi := &file_oci_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{7}
}

func (x *Root) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Root) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

type Hooks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Prestart is a list of hooks to be run before the container process is executed.
	Prestart []*Hook `protobuf:"bytes,1,rep,name=Prestart,proto3" json:"Prestart,omitempty"`
	// Poststart is a list of hooks to be run after the container process is started.
	Poststart []*Hook `protobuf:"bytes,2,rep,name=Poststart,proto3" json:"Poststart,omitempty"`
	// Poststop is a list of hooks to be run after the container process exits.
	Poststop []*Hook `protobuf:"bytes,3,rep,name=Poststop,proto3" json:"Poststop,omitempty"`
	// Createruntime is a list of hooks to be run during the creation of runtime(sandbox).
	CreateRuntime []*Hook `protobuf:"bytes,4,rep,name=CreateRuntime,proto3" json:"CreateRuntime,omitempty"`
	// CreateContainer is a list of hooks to be run after VM is started, and before container is created.
	CreateContainer []*Hook `protobuf:"bytes,5,rep,name=CreateContainer,proto3" json:"CreateContainer,omitempty"`
	// StartContainer is a list of hooks to be run after container is created, but before it is started.
	StartContainer []*Hook `protobuf:"bytes,6,rep,name=StartContainer,proto3" json:"StartContainer,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Hooks) Reset() {
	*x = Hooks{}
	mi := &file_oci_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hooks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hooks) ProtoMessage() {}

func (x *Hooks) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hooks.ProtoReflect.Descriptor instead.
func (*Hooks) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{8}
}

func (x *Hooks) GetPrestart() []*Hook {
	if x != nil {
		return x.Prestart
	}
	return nil
}

func (x *Hooks) GetPoststart() []*Hook {
	if x != nil {
		return x.Poststart
	}
	return nil
}

func (x *Hooks) GetPoststop() []*Hook {
	if x != nil {
		return x.Poststop
	}
	return nil
}

func (x *Hooks) GetCreateRuntime() []*Hook {
	if x != nil {
		return x.CreateRuntime
	}
	return nil
}

func (x *Hooks) GetCreateContainer() []*Hook {
	if x != nil {
		return x.CreateContainer
	}
	return nil
}

func (x *Hooks) GetStartContainer() []*Hook {
	if x != nil {
		return x.StartContainer
	}
	return nil
}

type Hook struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path is the absolute path to the container's root filesystem.
	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	// Arguments used for the binary, including the binary name itself.
	Args []string `protobuf:"bytes,2,rep,name=Args,proto3" json:"Args,omitempty"`
	// Additional `key=value` environment variables.
	Env []string `protobuf:"bytes,3,rep,name=Env,proto3" json:"Env,omitempty"`
	// Timeout is the number of seconds before aborting the hook. If set, timeout MUST be greater than zero.
	Timeout       int64 `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Hook) Reset() {
	*x = Hook{}
	mi := &file_oci_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hook) ProtoMessage() {}

func (x *Hook) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hook.ProtoReflect.Descriptor instead.
func (*Hook) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{9}
}

func (x *Hook) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Hook) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Hook) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Hook) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type Linux struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UIDMapping specifies user mappings for supporting user namespaces.
	UIDMappings []*LinuxIDMapping `protobuf:"bytes,1,rep,name=UIDMappings,proto3" json:"UIDMappings,omitempty"`
	// GIDMapping specifies group mappings for supporting user namespaces.
	GIDMappings []*LinuxIDMapping `protobuf:"bytes,2,rep,name=GIDMappings,proto3" json:"GIDMappings,omitempty"`
	// Sysctl are a set of key value pairs that are set for the container on start
	Sysctl map[string]string `protobuf:"bytes,3,rep,name=Sysctl,proto3" json:"Sysctl,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Resources contain cgroup information for handling resource constraints
	// for the container
	Resources *LinuxResources `protobuf:"bytes,4,opt,name=Resources,proto3" json:"Resources,omitempty"`
	// CgroupsPath specifies the path to cgroups that are created and/or joined by the container.
	// The path is expected to be relative to the cgroups mountpoint.
	// If resources are specified, the cgroups at CgroupsPath will be updated based on resources.
	CgroupsPath string `protobuf:"bytes,5,opt,name=CgroupsPath,proto3" json:"CgroupsPath,omitempty"`
	// Namespaces contains the namespaces that are created and/or joined by the container
	Namespaces []*LinuxNamespace `protobuf:"bytes,6,rep,name=Namespaces,proto3" json:"Namespaces,omitempty"`
	// Devices are a list of device nodes that are created for the container
	Devices []*LinuxDevice `protobuf:"bytes,7,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Seccomp specifies the seccomp security settings for the container.
	Seccomp *LinuxSeccomp `protobuf:"bytes,8,opt,name=Seccomp,proto3" json:"Seccomp,omitempty"`
	// RootfsPropagation is the rootfs mount propagation mode for the container.
	RootfsPropagation string `protobuf:"bytes,9,opt,name=RootfsPropagation,proto3" json:"RootfsPropagation,omitempty"`
	// MaskedPaths masks over the provided paths inside the container.
	MaskedPaths []string `protobuf:"bytes,10,rep,name=MaskedPaths,proto3" json:"MaskedPaths,omitempty"`
	// ReadonlyPaths sets the provided paths as RO inside the container.
	ReadonlyPaths []string `protobuf:"bytes,11,rep,name=ReadonlyPaths,proto3" json:"ReadonlyPaths,omitempty"`
	// MountLabel specifies the selinux context for the mounts in the container.
	MountLabel string `protobuf:"bytes,12,opt,name=MountLabel,proto3" json:"MountLabel,omitempty"`
	// IntelRdt contains Intel Resource Director Technology (RDT) information
	// for handling resource constraints (e.g., L3 cache) for the container
	IntelRdt      *LinuxIntelRdt `protobuf:"bytes,13,opt,name=IntelRdt,proto3" json:"IntelRdt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Linux) Reset() {
	*x = Linux{}
	mi := &file_oci_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Linux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Linux) ProtoMessage() {}

func (x *Linux) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Linux.ProtoReflect.Descriptor instead.
func (*Linux) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{10}
}

func (x *Linux) GetUIDMappings() []*LinuxIDMapping {
	if x != nil {
		return x.UIDMappings
	}
	return nil
}

func (x *Linux) GetGIDMappings() []*LinuxIDMapping {
	if x != nil {
		return x.GIDMappings
	}
	return nil
}

func (x *Linux) GetSysctl() map[string]string {
	if x != nil {
		return x.Sysctl
	}
	return nil
}

func (x *Linux) GetResources() *LinuxResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Linux) GetCgroupsPath() string {
	if x != nil {
		return x.CgroupsPath
	}
	return ""
}

func (x *Linux) GetNamespaces() []*LinuxNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *Linux) GetDevices() []*LinuxDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Linux) GetSeccomp() *LinuxSeccomp {
	if x != nil {
		return x.Seccomp
	}
	return nil
}

func (x *Linux) GetRootfsPropagation() string {
	if x != nil {
		return x.RootfsPropagation
	}
	return ""
}

func (x *Linux) GetMaskedPaths() []string {
	if x != nil {
		return x.MaskedPaths
	}
	return nil
}

func (x *Linux) GetReadonlyPaths() []string {
	if x != nil {
		return x.ReadonlyPaths
	}
	return nil
}

func (x *Linux) GetMountLabel() string {
	if x != nil {
		return x.MountLabel
	}
	return ""
}

func (x *Linux) GetIntelRdt() *LinuxIntelRdt {
	if x != nil {
		return x.IntelRdt
	}
	return nil
}

type Windows struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Dummy string, never used.
	Dummy         string `protobuf:"bytes,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Windows) Reset() {
	*x = Windows{}
	mi := &file_oci_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Windows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Windows) ProtoMessage() {}

func (x *Windows) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Windows.ProtoReflect.Descriptor instead.
func (*Windows) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{11}
}

func (x *Windows) GetDummy() string {
	if x != nil {
		return x.Dummy
	}
	return ""
}

type Solaris struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Dummy string, never used.
	Dummy         string `protobuf:"bytes,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Solaris) Reset() {
	*x = Solaris{}
	mi := &file_oci_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Solaris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Solaris) ProtoMessage() {}

func (x *Solaris) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Solaris.ProtoReflect.Descriptor instead.
func (*Solaris) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{12}
}

func (x *Solaris) GetDummy() string {
	if x != nil {
		return x.Dummy
	}
	return ""
}

type LinuxIDMapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HostID is the starting UID/GID on the host to be mapped to 'ContainerID'
	HostID uint32 `protobuf:"varint,1,opt,name=HostID,proto3" json:"HostID,omitempty"`
	// ContainerID is the starting UID/GID in the container
	ContainerID uint32 `protobuf:"varint,2,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	// Size is the number of IDs to be mapped
	Size          uint32 `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxIDMapping) Reset() {
	*x = LinuxIDMapping{}
	mi := &file_oci_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxIDMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxIDMapping) ProtoMessage() {}

func (x *LinuxIDMapping) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxIDMapping.ProtoReflect.Descriptor instead.
func (*LinuxIDMapping) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{13}
}

func (x *LinuxIDMapping) GetHostID() uint32 {
	if x != nil {
		return x.HostID
	}
	return 0
}

func (x *LinuxIDMapping) GetContainerID() uint32 {
	if x != nil {
		return x.ContainerID
	}
	return 0
}

func (x *LinuxIDMapping) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LinuxNamespace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the type of namespace
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Path is a path to an existing namespace persisted on disk that can be joined
	// and is of the same type
	Path          string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxNamespace) Reset() {
	*x = LinuxNamespace{}
	mi := &file_oci_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxNamespace) ProtoMessage() {}

func (x *LinuxNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxNamespace.ProtoReflect.Descriptor instead.
func (*LinuxNamespace) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{14}
}

func (x *LinuxNamespace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LinuxNamespace) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type LinuxDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the device.
	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	// Device type, block, char, etc.
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,3,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,4,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// FileMode permission bits for the device.
	FileMode uint32 `protobuf:"varint,5,opt,name=FileMode,proto3" json:"FileMode,omitempty"`
	// UID of the device.
	UID uint32 `protobuf:"varint,6,opt,name=UID,proto3" json:"UID,omitempty"`
	// Gid of the device.
	GID           uint32 `protobuf:"varint,7,opt,name=GID,proto3" json:"GID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxDevice) Reset() {
	*x = LinuxDevice{}
	mi := &file_oci_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxDevice) ProtoMessage() {}

func (x *LinuxDevice) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxDevice.ProtoReflect.Descriptor instead.
func (*LinuxDevice) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{15}
}

func (x *LinuxDevice) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LinuxDevice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LinuxDevice) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxDevice) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxDevice) GetFileMode() uint32 {
	if x != nil {
		return x.FileMode
	}
	return 0
}

func (x *LinuxDevice) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *LinuxDevice) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

type LinuxResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Devices configures the device whitelist.
	Devices []*LinuxDeviceCgroup `protobuf:"bytes,1,rep,name=Devices,proto3" json:"Devices,omitempty"`
	// Memory restriction configuration
	Memory *LinuxMemory `protobuf:"bytes,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	// CPU resource restriction configuration
	CPU *LinuxCPU `protobuf:"bytes,3,opt,name=CPU,proto3" json:"CPU,omitempty"`
	// Task resource restriction configuration.
	Pids *LinuxPids `protobuf:"bytes,4,opt,name=Pids,proto3" json:"Pids,omitempty"`
	// BlockIO restriction configuration
	BlockIO *LinuxBlockIO `protobuf:"bytes,5,opt,name=BlockIO,proto3" json:"BlockIO,omitempty"`
	// Hugetlb limit (in bytes)
	HugepageLimits []*LinuxHugepageLimit `protobuf:"bytes,6,rep,name=HugepageLimits,proto3" json:"HugepageLimits,omitempty"`
	// Network restriction configuration
	Network       *LinuxNetwork `protobuf:"bytes,7,opt,name=Network,proto3" json:"Network,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxResources) Reset() {
	*x = LinuxResources{}
	mi := &file_oci_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxResources) ProtoMessage() {}

func (x *LinuxResources) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxResources.ProtoReflect.Descriptor instead.
func (*LinuxResources) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{16}
}

func (x *LinuxResources) GetDevices() []*LinuxDeviceCgroup {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *LinuxResources) GetMemory() *LinuxMemory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *LinuxResources) GetCPU() *LinuxCPU {
	if x != nil {
		return x.CPU
	}
	return nil
}

func (x *LinuxResources) GetPids() *LinuxPids {
	if x != nil {
		return x.Pids
	}
	return nil
}

func (x *LinuxResources) GetBlockIO() *LinuxBlockIO {
	if x != nil {
		return x.BlockIO
	}
	return nil
}

func (x *LinuxResources) GetHugepageLimits() []*LinuxHugepageLimit {
	if x != nil {
		return x.HugepageLimits
	}
	return nil
}

func (x *LinuxResources) GetNetwork() *LinuxNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type LinuxMemory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Memory limit (in bytes).
	Limit int64 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// Memory reservation or soft_limit (in bytes).
	Reservation int64 `protobuf:"varint,2,opt,name=Reservation,proto3" json:"Reservation,omitempty"`
	// Total memory limit (memory + swap).
	Swap int64 `protobuf:"varint,3,opt,name=Swap,proto3" json:"Swap,omitempty"`
	// Kernel memory limit (in bytes).
	Kernel int64 `protobuf:"varint,4,opt,name=Kernel,proto3" json:"Kernel,omitempty"`
	// Kernel memory limit for tcp (in bytes)
	KernelTCP int64 `protobuf:"varint,5,opt,name=KernelTCP,proto3" json:"KernelTCP,omitempty"`
	// How aggressive the kernel will swap memory pages.
	Swappiness uint64 `protobuf:"varint,6,opt,name=Swappiness,proto3" json:"Swappiness,omitempty"`
	// DisableOOMKiller disables the OOM killer for out of memory conditions
	DisableOOMKiller bool `protobuf:"varint,7,opt,name=DisableOOMKiller,proto3" json:"DisableOOMKiller,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LinuxMemory) Reset() {
	*x = LinuxMemory{}
	mi := &file_oci_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxMemory) ProtoMessage() {}

func (x *LinuxMemory) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxMemory.ProtoReflect.Descriptor instead.
func (*LinuxMemory) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{17}
}

func (x *LinuxMemory) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LinuxMemory) GetReservation() int64 {
	if x != nil {
		return x.Reservation
	}
	return 0
}

func (x *LinuxMemory) GetSwap() int64 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *LinuxMemory) GetKernel() int64 {
	if x != nil {
		return x.Kernel
	}
	return 0
}

func (x *LinuxMemory) GetKernelTCP() int64 {
	if x != nil {
		return x.KernelTCP
	}
	return 0
}

func (x *LinuxMemory) GetSwappiness() uint64 {
	if x != nil {
		return x.Swappiness
	}
	return 0
}

func (x *LinuxMemory) GetDisableOOMKiller() bool {
	if x != nil {
		return x.DisableOOMKiller
	}
	return false
}

type LinuxCPU struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU shares (relative weight (ratio) vs. other cgroups with cpu shares).
	Shares uint64 `protobuf:"varint,1,opt,name=Shares,proto3" json:"Shares,omitempty"`
	// CPU hardcap limit (in usecs). Allowed cpu time in a given period.
	Quota int64 `protobuf:"varint,2,opt,name=Quota,proto3" json:"Quota,omitempty"`
	// CPU period to be used for hardcapping (in usecs).
	Period uint64 `protobuf:"varint,3,opt,name=Period,proto3" json:"Period,omitempty"`
	// How much time realtime scheduling may use (in usecs).
	RealtimeRuntime int64 `protobuf:"varint,4,opt,name=RealtimeRuntime,proto3" json:"RealtimeRuntime,omitempty"`
	// CPU period to be used for realtime scheduling (in usecs).
	RealtimePeriod uint64 `protobuf:"varint,5,opt,name=RealtimePeriod,proto3" json:"RealtimePeriod,omitempty"`
	// CPUs to use within the cpuset. Default is to use any CPU available.
	Cpus string `protobuf:"bytes,6,opt,name=Cpus,proto3" json:"Cpus,omitempty"`
	// List of memory nodes in the cpuset. Default is to use any available memory node.
	Mems          string `protobuf:"bytes,7,opt,name=Mems,proto3" json:"Mems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxCPU) Reset() {
	*x = LinuxCPU{}
	mi := &file_oci_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxCPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxCPU) ProtoMessage() {}

func (x *LinuxCPU) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxCPU.ProtoReflect.Descriptor instead.
func (*LinuxCPU) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{18}
}

func (x *LinuxCPU) GetShares() uint64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *LinuxCPU) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *LinuxCPU) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *LinuxCPU) GetRealtimeRuntime() int64 {
	if x != nil {
		return x.RealtimeRuntime
	}
	return 0
}

func (x *LinuxCPU) GetRealtimePeriod() uint64 {
	if x != nil {
		return x.RealtimePeriod
	}
	return 0
}

func (x *LinuxCPU) GetCpus() string {
	if x != nil {
		return x.Cpus
	}
	return ""
}

func (x *LinuxCPU) GetMems() string {
	if x != nil {
		return x.Mems
	}
	return ""
}

type LinuxWeightDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,1,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,2,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// Weight is the bandwidth rate for the device.
	Weight uint32 `protobuf:"varint,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// LeafWeight is the bandwidth rate for the device while competing with the cgroup's child cgroups, CFQ scheduler only
	LeafWeight    uint32 `protobuf:"varint,4,opt,name=LeafWeight,proto3" json:"LeafWeight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxWeightDevice) Reset() {
	*x = LinuxWeightDevice{}
	mi := &file_oci_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxWeightDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxWeightDevice) ProtoMessage() {}

func (x *LinuxWeightDevice) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxWeightDevice.ProtoReflect.Descriptor instead.
func (*LinuxWeightDevice) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{19}
}

func (x *LinuxWeightDevice) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxWeightDevice) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxWeightDevice) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *LinuxWeightDevice) GetLeafWeight() uint32 {
	if x != nil {
		return x.LeafWeight
	}
	return 0
}

type LinuxThrottleDevice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,1,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,2,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// Rate is the IO rate limit per cgroup per device
	Rate          uint64 `protobuf:"varint,3,opt,name=Rate,proto3" json:"Rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxThrottleDevice) Reset() {
	*x = LinuxThrottleDevice{}
	mi := &file_oci_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxThrottleDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxThrottleDevice) ProtoMessage() {}

func (x *LinuxThrottleDevice) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxThrottleDevice.ProtoReflect.Descriptor instead.
func (*LinuxThrottleDevice) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{20}
}

func (x *LinuxThrottleDevice) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxThrottleDevice) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxThrottleDevice) GetRate() uint64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type LinuxBlockIO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies per cgroup weight
	Weight uint32 `protobuf:"varint,1,opt,name=Weight,proto3" json:"Weight,omitempty"`
	// Specifies tasks' weight in the given cgroup while competing with the cgroup's child cgroups, CFQ scheduler only
	LeafWeight uint32 `protobuf:"varint,2,opt,name=LeafWeight,proto3" json:"LeafWeight,omitempty"`
	// Weight per cgroup per device, can override BlkioWeight
	WeightDevice []*LinuxWeightDevice `protobuf:"bytes,3,rep,name=WeightDevice,proto3" json:"WeightDevice,omitempty"`
	// IO read rate limit per cgroup per device, bytes per second
	ThrottleReadBpsDevice []*LinuxThrottleDevice `protobuf:"bytes,4,rep,name=ThrottleReadBpsDevice,proto3" json:"ThrottleReadBpsDevice,omitempty"`
	// IO write rate limit per cgroup per device, bytes per second
	ThrottleWriteBpsDevice []*LinuxThrottleDevice `protobuf:"bytes,5,rep,name=ThrottleWriteBpsDevice,proto3" json:"ThrottleWriteBpsDevice,omitempty"`
	// IO read rate limit per cgroup per device, IO per second
	ThrottleReadIOPSDevice []*LinuxThrottleDevice `protobuf:"bytes,6,rep,name=ThrottleReadIOPSDevice,proto3" json:"ThrottleReadIOPSDevice,omitempty"`
	// IO write rate limit per cgroup per device, IO per second
	ThrottleWriteIOPSDevice []*LinuxThrottleDevice `protobuf:"bytes,7,rep,name=ThrottleWriteIOPSDevice,proto3" json:"ThrottleWriteIOPSDevice,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LinuxBlockIO) Reset() {
	*x = LinuxBlockIO{}
	mi := &file_oci_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxBlockIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxBlockIO) ProtoMessage() {}

func (x *LinuxBlockIO) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxBlockIO.ProtoReflect.Descriptor instead.
func (*LinuxBlockIO) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{21}
}

func (x *LinuxBlockIO) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *LinuxBlockIO) GetLeafWeight() uint32 {
	if x != nil {
		return x.LeafWeight
	}
	return 0
}

func (x *LinuxBlockIO) GetWeightDevice() []*LinuxWeightDevice {
	if x != nil {
		return x.WeightDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleReadBpsDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleReadBpsDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleWriteBpsDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleWriteBpsDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleReadIOPSDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleReadIOPSDevice
	}
	return nil
}

func (x *LinuxBlockIO) GetThrottleWriteIOPSDevice() []*LinuxThrottleDevice {
	if x != nil {
		return x.ThrottleWriteIOPSDevice
	}
	return nil
}

type LinuxPids struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of PIDs. Default is "no limit".
	Limit         int64 `protobuf:"varint,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxPids) Reset() {
	*x = LinuxPids{}
	mi := &file_oci_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxPids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxPids) ProtoMessage() {}

func (x *LinuxPids) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxPids.ProtoReflect.Descriptor instead.
func (*LinuxPids) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{22}
}

func (x *LinuxPids) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type LinuxDeviceCgroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allow or deny
	Allow bool `protobuf:"varint,1,opt,name=Allow,proto3" json:"Allow,omitempty"`
	// Device type, block, char, etc.
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	// Major is the device's major number.
	Major int64 `protobuf:"varint,3,opt,name=Major,proto3" json:"Major,omitempty"`
	// Minor is the device's minor number.
	Minor int64 `protobuf:"varint,4,opt,name=Minor,proto3" json:"Minor,omitempty"`
	// Cgroup access permissions format, rwm.
	Access        string `protobuf:"bytes,5,opt,name=Access,proto3" json:"Access,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxDeviceCgroup) Reset() {
	*x = LinuxDeviceCgroup{}
	mi := &file_oci_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxDeviceCgroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxDeviceCgroup) ProtoMessage() {}

func (x *LinuxDeviceCgroup) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxDeviceCgroup.ProtoReflect.Descriptor instead.
func (*LinuxDeviceCgroup) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{23}
}

func (x *LinuxDeviceCgroup) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *LinuxDeviceCgroup) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LinuxDeviceCgroup) GetMajor() int64 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *LinuxDeviceCgroup) GetMinor() int64 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *LinuxDeviceCgroup) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

type LinuxNetwork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set class identifier for container's network packets
	ClassID uint32 `protobuf:"varint,1,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	// Set priority of network traffic for container
	Priorities    []*LinuxInterfacePriority `protobuf:"bytes,2,rep,name=Priorities,proto3" json:"Priorities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxNetwork) Reset() {
	*x = LinuxNetwork{}
	mi := &file_oci_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxNetwork) ProtoMessage() {}

func (x *LinuxNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxNetwork.ProtoReflect.Descriptor instead.
func (*LinuxNetwork) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{24}
}

func (x *LinuxNetwork) GetClassID() uint32 {
	if x != nil {
		return x.ClassID
	}
	return 0
}

func (x *LinuxNetwork) GetPriorities() []*LinuxInterfacePriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

type LinuxHugepageLimit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pagesize is the hugepage size
	Pagesize string `protobuf:"bytes,1,opt,name=Pagesize,proto3" json:"Pagesize,omitempty"`
	// Limit is the limit of "hugepagesize" hugetlb usage
	Limit         uint64 `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxHugepageLimit) Reset() {
	*x = LinuxHugepageLimit{}
	mi := &file_oci_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxHugepageLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxHugepageLimit) ProtoMessage() {}

func (x *LinuxHugepageLimit) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxHugepageLimit.ProtoReflect.Descriptor instead.
func (*LinuxHugepageLimit) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{25}
}

func (x *LinuxHugepageLimit) GetPagesize() string {
	if x != nil {
		return x.Pagesize
	}
	return ""
}

func (x *LinuxHugepageLimit) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type LinuxInterfacePriority struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the network interface
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Priority for the interface
	Priority      uint32 `protobuf:"varint,2,opt,name=Priority,proto3" json:"Priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxInterfacePriority) Reset() {
	*x = LinuxInterfacePriority{}
	mi := &file_oci_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxInterfacePriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxInterfacePriority) ProtoMessage() {}

func (x *LinuxInterfacePriority) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxInterfacePriority.ProtoReflect.Descriptor instead.
func (*LinuxInterfacePriority) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{26}
}

func (x *LinuxInterfacePriority) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinuxInterfacePriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type LinuxSeccomp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefaultAction string                 `protobuf:"bytes,1,opt,name=DefaultAction,proto3" json:"DefaultAction,omitempty"`
	Architectures []string               `protobuf:"bytes,2,rep,name=Architectures,proto3" json:"Architectures,omitempty"`
	Flags         []string               `protobuf:"bytes,3,rep,name=Flags,proto3" json:"Flags,omitempty"`
	Syscalls      []*LinuxSyscall        `protobuf:"bytes,4,rep,name=Syscalls,proto3" json:"Syscalls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxSeccomp) Reset() {
	*x = LinuxSeccomp{}
	mi := &file_oci_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxSeccomp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSeccomp) ProtoMessage() {}

func (x *LinuxSeccomp) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSeccomp.ProtoReflect.Descriptor instead.
func (*LinuxSeccomp) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{27}
}

func (x *LinuxSeccomp) GetDefaultAction() string {
	if x != nil {
		return x.DefaultAction
	}
	return ""
}

func (x *LinuxSeccomp) GetArchitectures() []string {
	if x != nil {
		return x.Architectures
	}
	return nil
}

func (x *LinuxSeccomp) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *LinuxSeccomp) GetSyscalls() []*LinuxSyscall {
	if x != nil {
		return x.Syscalls
	}
	return nil
}

type LinuxSeccompArg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint64                 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	Value         uint64                 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ValueTwo      uint64                 `protobuf:"varint,3,opt,name=ValueTwo,proto3" json:"ValueTwo,omitempty"`
	Op            string                 `protobuf:"bytes,4,opt,name=Op,proto3" json:"Op,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxSeccompArg) Reset() {
	*x = LinuxSeccompArg{}
	mi := &file_oci_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxSeccompArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSeccompArg) ProtoMessage() {}

func (x *LinuxSeccompArg) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSeccompArg.ProtoReflect.Descriptor instead.
func (*LinuxSeccompArg) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{28}
}

func (x *LinuxSeccompArg) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LinuxSeccompArg) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LinuxSeccompArg) GetValueTwo() uint64 {
	if x != nil {
		return x.ValueTwo
	}
	return 0
}

func (x *LinuxSeccompArg) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type LinuxSyscall struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Names  []string               `protobuf:"bytes,1,rep,name=Names,proto3" json:"Names,omitempty"`
	Action string                 `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	// Types that are valid to be assigned to ErrnoRet:
	//
	//	*LinuxSyscall_Errnoret
	ErrnoRet      isLinuxSyscall_ErrnoRet `protobuf_oneof:"ErrnoRet"`
	Args          []*LinuxSeccompArg      `protobuf:"bytes,4,rep,name=Args,proto3" json:"Args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxSyscall) Reset() {
	*x = LinuxSyscall{}
	mi := &file_oci_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxSyscall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxSyscall) ProtoMessage() {}

func (x *LinuxSyscall) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxSyscall.ProtoReflect.Descriptor instead.
func (*LinuxSyscall) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{29}
}

func (x *LinuxSyscall) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *LinuxSyscall) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *LinuxSyscall) GetErrnoRet() isLinuxSyscall_ErrnoRet {
	if x != nil {
		return x.ErrnoRet
	}
	return nil
}

func (x *LinuxSyscall) GetErrnoret() uint32 {
	if x != nil {
		if x, ok := x.ErrnoRet.(*LinuxSyscall_Errnoret); ok {
			return x.Errnoret
		}
	}
	return 0
}

func (x *LinuxSyscall) GetArgs() []*LinuxSeccompArg {
	if x != nil {
		return x.Args
	}
	return nil
}

type isLinuxSyscall_ErrnoRet interface {
	isLinuxSyscall_ErrnoRet()
}

type LinuxSyscall_Errnoret struct {
	Errnoret uint32 `protobuf:"varint,3,opt,name=errnoret,proto3,oneof"`
}

func (*LinuxSyscall_Errnoret) isLinuxSyscall_ErrnoRet() {}

type LinuxIntelRdt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The schema for L3 cache id and capacity bitmask (CBM)
	// Format: "L3:<cache_id0>=<cbm0>;<cache_id1>=<cbm1>;..."
	L3CacheSchema string `protobuf:"bytes,1,opt,name=L3CacheSchema,proto3" json:"L3CacheSchema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinuxIntelRdt) Reset() {
	*x = LinuxIntelRdt{}
	mi := &file_oci_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinuxIntelRdt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxIntelRdt) ProtoMessage() {}

func (x *LinuxIntelRdt) ProtoReflect() protoreflect.Message {
	mi := &file_oci_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxIntelRdt.ProtoReflect.Descriptor instead.
func (*LinuxIntelRdt) Descriptor() ([]byte, []int) {
	return file_oci_proto_rawDescGZIP(), []int{30}
}

func (x *LinuxIntelRdt) GetL3CacheSchema() string {
	if x != nil {
		return x.L3CacheSchema
	}
	return ""
}

var File_oci_proto protoreflect.FileDescriptor

const file_oci_proto_rawDesc = "" +
	"\n" +
	"\toci.proto\x12\x04grpc\"\xc1\x03\n" +
	"\x04Spec\x12\x18\n" +
	"\aVersion\x18\x01 \x01(\tR\aVersion\x12'\n" +
	"\aProcess\x18\x02 \x01(\v2\r.grpc.ProcessR\aProcess\x12\x1e\n" +
	"\x04Root\x18\x03 \x01(\v2\n" +
	".grpc.RootR\x04Root\x12\x1a\n" +
	"\bHostname\x18\x04 \x01(\tR\bHostname\x12#\n" +
	"\x06Mounts\x18\x05 \x03(\v2\v.grpc.MountR\x06Mounts\x12!\n" +
	"\x05Hooks\x18\x06 \x01(\v2\v.grpc.HooksR\x05Hooks\x12=\n" +
	"\vAnnotations\x18\a \x03(\v2\x1b.grpc.Spec.AnnotationsEntryR\vAnnotations\x12!\n" +
	"\x05Linux\x18\b \x01(\v2\v.grpc.LinuxR\x05Linux\x12'\n" +
	"\aSolaris\x18\t \x01(\v2\r.grpc.SolarisR\aSolaris\x12'\n" +
	"\aWindows\x18\n" +
	" \x01(\v2\r.grpc.WindowsR\aWindows\x1a>\n" +
	"\x10AnnotationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xae\x03\n" +
	"\aProcess\x12\x1a\n" +
	"\bTerminal\x18\x01 \x01(\bR\bTerminal\x12+\n" +
	"\vConsoleSize\x18\x02 \x01(\v2\t.grpc.BoxR\vConsoleSize\x12\x1e\n" +
	"\x04User\x18\x03 \x01(\v2\n" +
	".grpc.UserR\x04User\x12\x12\n" +
	"\x04Args\x18\x04 \x03(\tR\x04Args\x12\x10\n" +
	"\x03Env\x18\x05 \x03(\tR\x03Env\x12\x10\n" +
	"\x03Cwd\x18\x06 \x01(\tR\x03Cwd\x12;\n" +
	"\fCapabilities\x18\a \x01(\v2\x17.grpc.LinuxCapabilitiesR\fCapabilities\x12+\n" +
	"\aRlimits\x18\b \x03(\v2\x11.grpc.POSIXRlimitR\aRlimits\x12(\n" +
	"\x0fNoNewPrivileges\x18\t \x01(\bR\x0fNoNewPrivileges\x12(\n" +
	"\x0fApparmorProfile\x18\n" +
	" \x01(\tR\x0fApparmorProfile\x12 \n" +
	"\vOOMScoreAdj\x18\v \x01(\x03R\vOOMScoreAdj\x12\"\n" +
	"\fSelinuxLabel\x18\f \x01(\tR\fSelinuxLabel\"3\n" +
	"\x03Box\x12\x16\n" +
	"\x06Height\x18\x01 \x01(\rR\x06Height\x12\x14\n" +
	"\x05Width\x18\x02 \x01(\rR\x05Width\"n\n" +
	"\x04User\x12\x10\n" +
	"\x03UID\x18\x01 \x01(\rR\x03UID\x12\x10\n" +
	"\x03GID\x18\x02 \x01(\rR\x03GID\x12&\n" +
	"\x0eAdditionalGids\x18\x03 \x03(\rR\x0eAdditionalGids\x12\x1a\n" +
	"\bUsername\x18\x04 \x01(\tR\bUsername\"\xa7\x01\n" +
	"\x11LinuxCapabilities\x12\x1a\n" +
	"\bBounding\x18\x01 \x03(\tR\bBounding\x12\x1c\n" +
	"\tEffective\x18\x02 \x03(\tR\tEffective\x12 \n" +
	"\vInheritable\x18\x03 \x03(\tR\vInheritable\x12\x1c\n" +
	"\tPermitted\x18\x04 \x03(\tR\tPermitted\x12\x18\n" +
	"\aAmbient\x18\x05 \x03(\tR\aAmbient\"I\n" +
	"\vPOSIXRlimit\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x12\n" +
	"\x04Hard\x18\x02 \x01(\x04R\x04Hard\x12\x12\n" +
	"\x04Soft\x18\x03 \x01(\x04R\x04Soft\"o\n" +
	"\x05Mount\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12 \n" +
	"\vdestination\x18\x03 \x01(\tR\vdestination\x12\x18\n" +
	"\aoptions\x18\x04 \x03(\tR\aoptions\"6\n" +
	"\x04Root\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\x12\x1a\n" +
	"\bReadonly\x18\x02 \x01(\bR\bReadonly\"\x9d\x02\n" +
	"\x05Hooks\x12&\n" +
	"\bPrestart\x18\x01 \x03(\v2\n" +
	".grpc.HookR\bPrestart\x12(\n" +
	"\tPoststart\x18\x02 \x03(\v2\n" +
	".grpc.HookR\tPoststart\x12&\n" +
	"\bPoststop\x18\x03 \x03(\v2\n" +
	".grpc.HookR\bPoststop\x120\n" +
	"\rCreateRuntime\x18\x04 \x03(\v2\n" +
	".grpc.HookR\rCreateRuntime\x124\n" +
	"\x0fCreateContainer\x18\x05 \x03(\v2\n" +
	".grpc.HookR\x0fCreateContainer\x122\n" +
	"\x0eStartContainer\x18\x06 \x03(\v2\n" +
	".grpc.HookR\x0eStartContainer\"Z\n" +
	"\x04Hook\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\x12\x12\n" +
	"\x04Args\x18\x02 \x03(\tR\x04Args\x12\x10\n" +
	"\x03Env\x18\x03 \x03(\tR\x03Env\x12\x18\n" +
	"\aTimeout\x18\x04 \x01(\x03R\aTimeout\"\x91\x05\n" +
	"\x05Linux\x126\n" +
	"\vUIDMappings\x18\x01 \x03(\v2\x14.grpc.LinuxIDMappingR\vUIDMappings\x126\n" +
	"\vGIDMappings\x18\x02 \x03(\v2\x14.grpc.LinuxIDMappingR\vGIDMappings\x12/\n" +
	"\x06Sysctl\x18\x03 \x03(\v2\x17.grpc.Linux.SysctlEntryR\x06Sysctl\x122\n" +
	"\tResources\x18\x04 \x01(\v2\x14.grpc.LinuxResourcesR\tResources\x12 \n" +
	"\vCgroupsPath\x18\x05 \x01(\tR\vCgroupsPath\x124\n" +
	"\n" +
	"Namespaces\x18\x06 \x03(\v2\x14.grpc.LinuxNamespaceR\n" +
	"Namespaces\x12+\n" +
	"\aDevices\x18\a \x03(\v2\x11.grpc.LinuxDeviceR\aDevices\x12,\n" +
	"\aSeccomp\x18\b \x01(\v2\x12.grpc.LinuxSeccompR\aSeccomp\x12,\n" +
	"\x11RootfsPropagation\x18\t \x01(\tR\x11RootfsPropagation\x12 \n" +
	"\vMaskedPaths\x18\n" +
	" \x03(\tR\vMaskedPaths\x12$\n" +
	"\rReadonlyPaths\x18\v \x03(\tR\rReadonlyPaths\x12\x1e\n" +
	"\n" +
	"MountLabel\x18\f \x01(\tR\n" +
	"MountLabel\x12/\n" +
	"\bIntelRdt\x18\r \x01(\v2\x13.grpc.LinuxIntelRdtR\bIntelRdt\x1a9\n" +
	"\vSysctlEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x1f\n" +
	"\aWindows\x12\x14\n" +
	"\x05dummy\x18\x01 \x01(\tR\x05dummy\"\x1f\n" +
	"\aSolaris\x12\x14\n" +
	"\x05dummy\x18\x01 \x01(\tR\x05dummy\"^\n" +
	"\x0eLinuxIDMapping\x12\x16\n" +
	"\x06HostID\x18\x01 \x01(\rR\x06HostID\x12 \n" +
	"\vContainerID\x18\x02 \x01(\rR\vContainerID\x12\x12\n" +
	"\x04Size\x18\x03 \x01(\rR\x04Size\"8\n" +
	"\x0eLinuxNamespace\x12\x12\n" +
	"\x04Type\x18\x01 \x01(\tR\x04Type\x12\x12\n" +
	"\x04Path\x18\x02 \x01(\tR\x04Path\"\xa1\x01\n" +
	"\vLinuxDevice\x12\x12\n" +
	"\x04Path\x18\x01 \x01(\tR\x04Path\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\tR\x04Type\x12\x14\n" +
	"\x05Major\x18\x03 \x01(\x03R\x05Major\x12\x14\n" +
	"\x05Minor\x18\x04 \x01(\x03R\x05Minor\x12\x1a\n" +
	"\bFileMode\x18\x05 \x01(\rR\bFileMode\x12\x10\n" +
	"\x03UID\x18\x06 \x01(\rR\x03UID\x12\x10\n" +
	"\x03GID\x18\a \x01(\rR\x03GID\"\xd3\x02\n" +
	"\x0eLinuxResources\x121\n" +
	"\aDevices\x18\x01 \x03(\v2\x17.grpc.LinuxDeviceCgroupR\aDevices\x12)\n" +
	"\x06Memory\x18\x02 \x01(\v2\x11.grpc.LinuxMemoryR\x06Memory\x12 \n" +
	"\x03CPU\x18\x03 \x01(\v2\x0e.grpc.LinuxCPUR\x03CPU\x12#\n" +
	"\x04Pids\x18\x04 \x01(\v2\x0f.grpc.LinuxPidsR\x04Pids\x12,\n" +
	"\aBlockIO\x18\x05 \x01(\v2\x12.grpc.LinuxBlockIOR\aBlockIO\x12@\n" +
	"\x0eHugepageLimits\x18\x06 \x03(\v2\x18.grpc.LinuxHugepageLimitR\x0eHugepageLimits\x12,\n" +
	"\aNetwork\x18\a \x01(\v2\x12.grpc.LinuxNetworkR\aNetwork\"\xdb\x01\n" +
	"\vLinuxMemory\x12\x14\n" +
	"\x05Limit\x18\x01 \x01(\x03R\x05Limit\x12 \n" +
	"\vReservation\x18\x02 \x01(\x03R\vReservation\x12\x12\n" +
	"\x04Swap\x18\x03 \x01(\x03R\x04Swap\x12\x16\n" +
	"\x06Kernel\x18\x04 \x01(\x03R\x06Kernel\x12\x1c\n" +
	"\tKernelTCP\x18\x05 \x01(\x03R\tKernelTCP\x12\x1e\n" +
	"\n" +
	"Swappiness\x18\x06 \x01(\x04R\n" +
	"Swappiness\x12*\n" +
	"\x10DisableOOMKiller\x18\a \x01(\bR\x10DisableOOMKiller\"\xca\x01\n" +
	"\bLinuxCPU\x12\x16\n" +
	"\x06Shares\x18\x01 \x01(\x04R\x06Shares\x12\x14\n" +
	"\x05Quota\x18\x02 \x01(\x03R\x05Quota\x12\x16\n" +
	"\x06Period\x18\x03 \x01(\x04R\x06Period\x12(\n" +
	"\x0fRealtimeRuntime\x18\x04 \x01(\x03R\x0fRealtimeRuntime\x12&\n" +
	"\x0eRealtimePeriod\x18\x05 \x01(\x04R\x0eRealtimePeriod\x12\x12\n" +
	"\x04Cpus\x18\x06 \x01(\tR\x04Cpus\x12\x12\n" +
	"\x04Mems\x18\a \x01(\tR\x04Mems\"w\n" +
	"\x11LinuxWeightDevice\x12\x14\n" +
	"\x05Major\x18\x01 \x01(\x03R\x05Major\x12\x14\n" +
	"\x05Minor\x18\x02 \x01(\x03R\x05Minor\x12\x16\n" +
	"\x06Weight\x18\x03 \x01(\rR\x06Weight\x12\x1e\n" +
	"\n" +
	"LeafWeight\x18\x04 \x01(\rR\n" +
	"LeafWeight\"U\n" +
	"\x13LinuxThrottleDevice\x12\x14\n" +
	"\x05Major\x18\x01 \x01(\x03R\x05Major\x12\x14\n" +
	"\x05Minor\x18\x02 \x01(\x03R\x05Minor\x12\x12\n" +
	"\x04Rate\x18\x03 \x01(\x04R\x04Rate\"\xcf\x03\n" +
	"\fLinuxBlockIO\x12\x16\n" +
	"\x06Weight\x18\x01 \x01(\rR\x06Weight\x12\x1e\n" +
	"\n" +
	"LeafWeight\x18\x02 \x01(\rR\n" +
	"LeafWeight\x12;\n" +
	"\fWeightDevice\x18\x03 \x03(\v2\x17.grpc.LinuxWeightDeviceR\fWeightDevice\x12O\n" +
	"\x15ThrottleReadBpsDevice\x18\x04 \x03(\v2\x19.grpc.LinuxThrottleDeviceR\x15ThrottleReadBpsDevice\x12Q\n" +
	"\x16ThrottleWriteBpsDevice\x18\x05 \x03(\v2\x19.grpc.LinuxThrottleDeviceR\x16ThrottleWriteBpsDevice\x12Q\n" +
	"\x16ThrottleReadIOPSDevice\x18\x06 \x03(\v2\x19.grpc.LinuxThrottleDeviceR\x16ThrottleReadIOPSDevice\x12S\n" +
	"\x17ThrottleWriteIOPSDevice\x18\a \x03(\v2\x19.grpc.LinuxThrottleDeviceR\x17ThrottleWriteIOPSDevice\"!\n" +
	"\tLinuxPids\x12\x14\n" +
	"\x05Limit\x18\x01 \x01(\x03R\x05Limit\"\x81\x01\n" +
	"\x11LinuxDeviceCgroup\x12\x14\n" +
	"\x05Allow\x18\x01 \x01(\bR\x05Allow\x12\x12\n" +
	"\x04Type\x18\x02 \x01(\tR\x04Type\x12\x14\n" +
	"\x05Major\x18\x03 \x01(\x03R\x05Major\x12\x14\n" +
	"\x05Minor\x18\x04 \x01(\x03R\x05Minor\x12\x16\n" +
	"\x06Access\x18\x05 \x01(\tR\x06Access\"f\n" +
	"\fLinuxNetwork\x12\x18\n" +
	"\aClassID\x18\x01 \x01(\rR\aClassID\x12<\n" +
	"\n" +
	"Priorities\x18\x02 \x03(\v2\x1c.grpc.LinuxInterfacePriorityR\n" +
	"Priorities\"F\n" +
	"\x12LinuxHugepageLimit\x12\x1a\n" +
	"\bPagesize\x18\x01 \x01(\tR\bPagesize\x12\x14\n" +
	"\x05Limit\x18\x02 \x01(\x04R\x05Limit\"H\n" +
	"\x16LinuxInterfacePriority\x12\x12\n" +
	"\x04Name\x18\x01 \x01(\tR\x04Name\x12\x1a\n" +
	"\bPriority\x18\x02 \x01(\rR\bPriority\"\xa0\x01\n" +
	"\fLinuxSeccomp\x12$\n" +
	"\rDefaultAction\x18\x01 \x01(\tR\rDefaultAction\x12$\n" +
	"\rArchitectures\x18\x02 \x03(\tR\rArchitectures\x12\x14\n" +
	"\x05Flags\x18\x03 \x03(\tR\x05Flags\x12.\n" +
	"\bSyscalls\x18\x04 \x03(\v2\x12.grpc.LinuxSyscallR\bSyscalls\"i\n" +
	"\x0fLinuxSeccompArg\x12\x14\n" +
	"\x05Index\x18\x01 \x01(\x04R\x05Index\x12\x14\n" +
	"\x05Value\x18\x02 \x01(\x04R\x05Value\x12\x1a\n" +
	"\bValueTwo\x18\x03 \x01(\x04R\bValueTwo\x12\x0e\n" +
	"\x02Op\x18\x04 \x01(\tR\x02Op\"\x91\x01\n" +
	"\fLinuxSyscall\x12\x14\n" +
	"\x05Names\x18\x01 \x03(\tR\x05Names\x12\x16\n" +
	"\x06Action\x18\x02 \x01(\tR\x06Action\x12\x1c\n" +
	"\berrnoret\x18\x03 \x01(\rH\x00R\berrnoret\x12)\n" +
	"\x04Args\x18\x04 \x03(\v2\x15.grpc.LinuxSeccompArgR\x04ArgsB\n" +
	"\n" +
	"\bErrnoRet\"5\n" +
	"\rLinuxIntelRdt\x12$\n" +
	"\rL3CacheSchema\x18\x01 \x01(\tR\rL3CacheSchemaB`Z^github.com/kata-containers/kata-containers/src/runtime/virtcontainers/pkg/agent/protocols/grpcb\x06proto3"

var (
	file_oci_proto_rawDescOnce sync.Once
	file_oci_proto_rawDescData []byte
)

func file_oci_proto_rawDescGZIP() []byte {
	file_oci_proto_rawDescOnce.Do(func() {
		file_oci_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_oci_proto_rawDesc), len(file_oci_proto_rawDesc)))
	})
	return file_oci_proto_rawDescData
}

var file_oci_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_oci_proto_goTypes = []any{
	(*Spec)(nil),                   // 0: grpc.Spec
	(*Process)(nil),                // 1: grpc.Process
	(*Box)(nil),                    // 2: grpc.Box
	(*User)(nil),                   // 3: grpc.User
	(*LinuxCapabilities)(nil),      // 4: grpc.LinuxCapabilities
	(*POSIXRlimit)(nil),            // 5: grpc.POSIXRlimit
	(*Mount)(nil),                  // 6: grpc.Mount
	(*Root)(nil),                   // 7: grpc.Root
	(*Hooks)(nil),                  // 8: grpc.Hooks
	(*Hook)(nil),                   // 9: grpc.Hook
	(*Linux)(nil),                  // 10: grpc.Linux
	(*Windows)(nil),                // 11: grpc.Windows
	(*Solaris)(nil),                // 12: grpc.Solaris
	(*LinuxIDMapping)(nil),         // 13: grpc.LinuxIDMapping
	(*LinuxNamespace)(nil),         // 14: grpc.LinuxNamespace
	(*LinuxDevice)(nil),            // 15: grpc.LinuxDevice
	(*LinuxResources)(nil),         // 16: grpc.LinuxResources
	(*LinuxMemory)(nil),            // 17: grpc.LinuxMemory
	(*LinuxCPU)(nil),               // 18: grpc.LinuxCPU
	(*LinuxWeightDevice)(nil),      // 19: grpc.LinuxWeightDevice
	(*LinuxThrottleDevice)(nil),    // 20: grpc.LinuxThrottleDevice
	(*LinuxBlockIO)(nil),           // 21: grpc.LinuxBlockIO
	(*LinuxPids)(nil),              // 22: grpc.LinuxPids
	(*LinuxDeviceCgroup)(nil),      // 23: grpc.LinuxDeviceCgroup
	(*LinuxNetwork)(nil),           // 24: grpc.LinuxNetwork
	(*LinuxHugepageLimit)(nil),     // 25: grpc.LinuxHugepageLimit
	(*LinuxInterfacePriority)(nil), // 26: grpc.LinuxInterfacePriority
	(*LinuxSeccomp)(nil),           // 27: grpc.LinuxSeccomp
	(*LinuxSeccompArg)(nil),        // 28: grpc.LinuxSeccompArg
	(*LinuxSyscall)(nil),           // 29: grpc.LinuxSyscall
	(*LinuxIntelRdt)(nil),          // 30: grpc.LinuxIntelRdt
	nil,                            // 31: grpc.Spec.AnnotationsEntry
	nil,                            // 32: grpc.Linux.SysctlEntry
}
var file_oci_proto_depIdxs = []int32{
	1,  // 0: grpc.Spec.Process:type_name -> grpc.Process
	7,  // 1: grpc.Spec.Root:type_name -> grpc.Root
	6,  // 2: grpc.Spec.Mounts:type_name -> grpc.Mount
	8,  // 3: grpc.Spec.Hooks:type_name -> grpc.Hooks
	31, // 4: grpc.Spec.Annotations:type_name -> grpc.Spec.AnnotationsEntry
	10, // 5: grpc.Spec.Linux:type_name -> grpc.Linux
	12, // 6: grpc.Spec.Solaris:type_name -> grpc.Solaris
	11, // 7: grpc.Spec.Windows:type_name -> grpc.Windows
	2,  // 8: grpc.Process.ConsoleSize:type_name -> grpc.Box
	3,  // 9: grpc.Process.User:type_name -> grpc.User
	4,  // 10: grpc.Process.Capabilities:type_name -> grpc.LinuxCapabilities
	5,  // 11: grpc.Process.Rlimits:type_name -> grpc.POSIXRlimit
	9,  // 12: grpc.Hooks.Prestart:type_name -> grpc.Hook
	9,  // 13: grpc.Hooks.Poststart:type_name -> grpc.Hook
	9,  // 14: grpc.Hooks.Poststop:type_name -> grpc.Hook
	9,  // 15: grpc.Hooks.CreateRuntime:type_name -> grpc.Hook
	9,  // 16: grpc.Hooks.CreateContainer:type_name -> grpc.Hook
	9,  // 17: grpc.Hooks.StartContainer:type_name -> grpc.Hook
	13, // 18: grpc.Linux.UIDMappings:type_name -> grpc.LinuxIDMapping
	13, // 19: grpc.Linux.GIDMappings:type_name -> grpc.LinuxIDMapping
	32, // 20: grpc.Linux.Sysctl:type_name -> grpc.Linux.SysctlEntry
	16, // 21: grpc.Linux.Resources:type_name -> grpc.LinuxResources
	14, // 22: grpc.Linux.Namespaces:type_name -> grpc.LinuxNamespace
	15, // 23: grpc.Linux.Devices:type_name -> grpc.LinuxDevice
	27, // 24: grpc.Linux.Seccomp:type_name -> grpc.LinuxSeccomp
	30, // 25: grpc.Linux.IntelRdt:type_name -> grpc.LinuxIntelRdt
	23, // 26: grpc.LinuxResources.Devices:type_name -> grpc.LinuxDeviceCgroup
	17, // 27: grpc.LinuxResources.Memory:type_name -> grpc.LinuxMemory
	18, // 28: grpc.LinuxResources.CPU:type_name -> grpc.LinuxCPU
	22, // 29: grpc.LinuxResources.Pids:type_name -> grpc.LinuxPids
	21, // 30: grpc.LinuxResources.BlockIO:type_name -> grpc.LinuxBlockIO
	25, // 31: grpc.LinuxResources.HugepageLimits:type_name -> grpc.LinuxHugepageLimit
	24, // 32: grpc.LinuxResources.Network:type_name -> grpc.LinuxNetwork
	19, // 33: grpc.LinuxBlockIO.WeightDevice:type_name -> grpc.LinuxWeightDevice
	20, // 34: grpc.LinuxBlockIO.ThrottleReadBpsDevice:type_name -> grpc.LinuxThrottleDevice
	20, // 35: grpc.LinuxBlockIO.ThrottleWriteBpsDevice:type_name -> grpc.LinuxThrottleDevice
	20, // 36: grpc.LinuxBlockIO.ThrottleReadIOPSDevice:type_name -> grpc.LinuxThrottleDevice
	20, // 37: grpc.LinuxBlockIO.ThrottleWriteIOPSDevice:type_name -> grpc.LinuxThrottleDevice
	26, // 38: grpc.LinuxNetwork.Priorities:type_name -> grpc.LinuxInterfacePriority
	29, // 39: grpc.LinuxSeccomp.Syscalls:type_name -> grpc.LinuxSyscall
	28, // 40: grpc.LinuxSyscall.Args:type_name -> grpc.LinuxSeccompArg
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_oci_proto_init() }
func file_oci_proto_init() {
	if File_oci_proto != nil {
		return
	}
	file_oci_proto_msgTypes[29].OneofWrappers = []any{
		(*LinuxSyscall_Errnoret)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_oci_proto_rawDesc), len(file_oci_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_oci_proto_goTypes,
		DependencyIndexes: file_oci_proto_depIdxs,
		MessageInfos:      file_oci_proto_msgTypes,
	}.Build()
	File_oci_proto = out.File
	file_oci_proto_goTypes = nil
	file_oci_proto_depIdxs = nil
}
