// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: cri-api/api.proto
package v1

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type RuntimeServiceService interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	RunPodSandbox(context.Context, *RunPodSandboxRequest) (*RunPodSandboxResponse, error)
	StopPodSandbox(context.Context, *StopPodSandboxRequest) (*StopPodSandboxResponse, error)
	RemovePodSandbox(context.Context, *RemovePodSandboxRequest) (*RemovePodSandboxResponse, error)
	PodSandboxStatus(context.Context, *PodSandboxStatusRequest) (*PodSandboxStatusResponse, error)
	ListPodSandbox(context.Context, *ListPodSandboxRequest) (*ListPodSandboxResponse, error)
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error)
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	ContainerStatus(context.Context, *ContainerStatusRequest) (*ContainerStatusResponse, error)
	UpdateContainerResources(context.Context, *UpdateContainerResourcesRequest) (*UpdateContainerResourcesResponse, error)
	ReopenContainerLog(context.Context, *ReopenContainerLogRequest) (*ReopenContainerLogResponse, error)
	ExecSync(context.Context, *ExecSyncRequest) (*ExecSyncResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Attach(context.Context, *AttachRequest) (*AttachResponse, error)
	PortForward(context.Context, *PortForwardRequest) (*PortForwardResponse, error)
	ContainerStats(context.Context, *ContainerStatsRequest) (*ContainerStatsResponse, error)
	ListContainerStats(context.Context, *ListContainerStatsRequest) (*ListContainerStatsResponse, error)
	PodSandboxStats(context.Context, *PodSandboxStatsRequest) (*PodSandboxStatsResponse, error)
	ListPodSandboxStats(context.Context, *ListPodSandboxStatsRequest) (*ListPodSandboxStatsResponse, error)
	UpdateRuntimeConfig(context.Context, *UpdateRuntimeConfigRequest) (*UpdateRuntimeConfigResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	CheckpointContainer(context.Context, *CheckpointContainerRequest) (*CheckpointContainerResponse, error)
	GetContainerEvents(context.Context, *GetEventsRequest, RuntimeService_GetContainerEventsServer) error
	ListMetricDescriptors(context.Context, *ListMetricDescriptorsRequest) (*ListMetricDescriptorsResponse, error)
	ListPodSandboxMetrics(context.Context, *ListPodSandboxMetricsRequest) (*ListPodSandboxMetricsResponse, error)
	RuntimeConfig(context.Context, *RuntimeConfigRequest) (*RuntimeConfigResponse, error)
}

type RuntimeService_GetContainerEventsServer interface {
	Send(*ContainerEventResponse) error
	ttrpc.StreamServer
}

type runtimeserviceGetContainerEventsServer struct {
	ttrpc.StreamServer
}

func (x *runtimeserviceGetContainerEventsServer) Send(m *ContainerEventResponse) error {
	return x.StreamServer.SendMsg(m)
}

func RegisterRuntimeServiceService(srv *ttrpc.Server, svc RuntimeServiceService) {
	srv.RegisterService("runtime.v1.RuntimeService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Version": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req VersionRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Version(ctx, &req)
			},
			"RunPodSandbox": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RunPodSandboxRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RunPodSandbox(ctx, &req)
			},
			"StopPodSandbox": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req StopPodSandboxRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.StopPodSandbox(ctx, &req)
			},
			"RemovePodSandbox": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RemovePodSandboxRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RemovePodSandbox(ctx, &req)
			},
			"PodSandboxStatus": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req PodSandboxStatusRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PodSandboxStatus(ctx, &req)
			},
			"ListPodSandbox": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListPodSandboxRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListPodSandbox(ctx, &req)
			},
			"CreateContainer": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req CreateContainerRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.CreateContainer(ctx, &req)
			},
			"StartContainer": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req StartContainerRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.StartContainer(ctx, &req)
			},
			"StopContainer": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req StopContainerRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.StopContainer(ctx, &req)
			},
			"RemoveContainer": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RemoveContainerRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RemoveContainer(ctx, &req)
			},
			"ListContainers": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListContainersRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListContainers(ctx, &req)
			},
			"ContainerStatus": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ContainerStatusRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ContainerStatus(ctx, &req)
			},
			"UpdateContainerResources": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req UpdateContainerResourcesRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.UpdateContainerResources(ctx, &req)
			},
			"ReopenContainerLog": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ReopenContainerLogRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ReopenContainerLog(ctx, &req)
			},
			"ExecSync": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ExecSyncRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ExecSync(ctx, &req)
			},
			"Exec": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ExecRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Exec(ctx, &req)
			},
			"Attach": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req AttachRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Attach(ctx, &req)
			},
			"PortForward": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req PortForwardRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PortForward(ctx, &req)
			},
			"ContainerStats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ContainerStatsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ContainerStats(ctx, &req)
			},
			"ListContainerStats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListContainerStatsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListContainerStats(ctx, &req)
			},
			"PodSandboxStats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req PodSandboxStatsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PodSandboxStats(ctx, &req)
			},
			"ListPodSandboxStats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListPodSandboxStatsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListPodSandboxStats(ctx, &req)
			},
			"UpdateRuntimeConfig": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req UpdateRuntimeConfigRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.UpdateRuntimeConfig(ctx, &req)
			},
			"Status": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req StatusRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Status(ctx, &req)
			},
			"CheckpointContainer": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req CheckpointContainerRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.CheckpointContainer(ctx, &req)
			},
			"ListMetricDescriptors": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListMetricDescriptorsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListMetricDescriptors(ctx, &req)
			},
			"ListPodSandboxMetrics": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListPodSandboxMetricsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListPodSandboxMetrics(ctx, &req)
			},
			"RuntimeConfig": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RuntimeConfigRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RuntimeConfig(ctx, &req)
			},
		},
		Streams: map[string]ttrpc.Stream{
			"GetContainerEvents": {
				Handler: func(ctx context.Context, stream ttrpc.StreamServer) (interface{}, error) {
					m := new(GetEventsRequest)
					if err := stream.RecvMsg(m); err != nil {
						return nil, err
					}
					return nil, svc.GetContainerEvents(ctx, m, &runtimeserviceGetContainerEventsServer{stream})
				},
				StreamingClient: false,
				StreamingServer: true,
			},
		},
	})
}

type RuntimeServiceClient interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	RunPodSandbox(context.Context, *RunPodSandboxRequest) (*RunPodSandboxResponse, error)
	StopPodSandbox(context.Context, *StopPodSandboxRequest) (*StopPodSandboxResponse, error)
	RemovePodSandbox(context.Context, *RemovePodSandboxRequest) (*RemovePodSandboxResponse, error)
	PodSandboxStatus(context.Context, *PodSandboxStatusRequest) (*PodSandboxStatusResponse, error)
	ListPodSandbox(context.Context, *ListPodSandboxRequest) (*ListPodSandboxResponse, error)
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error)
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	ContainerStatus(context.Context, *ContainerStatusRequest) (*ContainerStatusResponse, error)
	UpdateContainerResources(context.Context, *UpdateContainerResourcesRequest) (*UpdateContainerResourcesResponse, error)
	ReopenContainerLog(context.Context, *ReopenContainerLogRequest) (*ReopenContainerLogResponse, error)
	ExecSync(context.Context, *ExecSyncRequest) (*ExecSyncResponse, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Attach(context.Context, *AttachRequest) (*AttachResponse, error)
	PortForward(context.Context, *PortForwardRequest) (*PortForwardResponse, error)
	ContainerStats(context.Context, *ContainerStatsRequest) (*ContainerStatsResponse, error)
	ListContainerStats(context.Context, *ListContainerStatsRequest) (*ListContainerStatsResponse, error)
	PodSandboxStats(context.Context, *PodSandboxStatsRequest) (*PodSandboxStatsResponse, error)
	ListPodSandboxStats(context.Context, *ListPodSandboxStatsRequest) (*ListPodSandboxStatsResponse, error)
	UpdateRuntimeConfig(context.Context, *UpdateRuntimeConfigRequest) (*UpdateRuntimeConfigResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	CheckpointContainer(context.Context, *CheckpointContainerRequest) (*CheckpointContainerResponse, error)
	GetContainerEvents(context.Context, *GetEventsRequest) (RuntimeService_GetContainerEventsClient, error)
	ListMetricDescriptors(context.Context, *ListMetricDescriptorsRequest) (*ListMetricDescriptorsResponse, error)
	ListPodSandboxMetrics(context.Context, *ListPodSandboxMetricsRequest) (*ListPodSandboxMetricsResponse, error)
	RuntimeConfig(context.Context, *RuntimeConfigRequest) (*RuntimeConfigResponse, error)
}

type runtimeserviceClient struct {
	client *ttrpc.Client
}

func NewRuntimeServiceClient(client *ttrpc.Client) RuntimeServiceClient {
	return &runtimeserviceClient{
		client: client,
	}
}

func (c *runtimeserviceClient) Version(ctx context.Context, req *VersionRequest) (*VersionResponse, error) {
	var resp VersionResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "Version", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) RunPodSandbox(ctx context.Context, req *RunPodSandboxRequest) (*RunPodSandboxResponse, error) {
	var resp RunPodSandboxResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "RunPodSandbox", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) StopPodSandbox(ctx context.Context, req *StopPodSandboxRequest) (*StopPodSandboxResponse, error) {
	var resp StopPodSandboxResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "StopPodSandbox", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) RemovePodSandbox(ctx context.Context, req *RemovePodSandboxRequest) (*RemovePodSandboxResponse, error) {
	var resp RemovePodSandboxResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "RemovePodSandbox", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) PodSandboxStatus(ctx context.Context, req *PodSandboxStatusRequest) (*PodSandboxStatusResponse, error) {
	var resp PodSandboxStatusResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "PodSandboxStatus", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ListPodSandbox(ctx context.Context, req *ListPodSandboxRequest) (*ListPodSandboxResponse, error) {
	var resp ListPodSandboxResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ListPodSandbox", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) CreateContainer(ctx context.Context, req *CreateContainerRequest) (*CreateContainerResponse, error) {
	var resp CreateContainerResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "CreateContainer", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) StartContainer(ctx context.Context, req *StartContainerRequest) (*StartContainerResponse, error) {
	var resp StartContainerResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "StartContainer", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) StopContainer(ctx context.Context, req *StopContainerRequest) (*StopContainerResponse, error) {
	var resp StopContainerResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "StopContainer", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) RemoveContainer(ctx context.Context, req *RemoveContainerRequest) (*RemoveContainerResponse, error) {
	var resp RemoveContainerResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "RemoveContainer", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ListContainers(ctx context.Context, req *ListContainersRequest) (*ListContainersResponse, error) {
	var resp ListContainersResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ListContainers", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ContainerStatus(ctx context.Context, req *ContainerStatusRequest) (*ContainerStatusResponse, error) {
	var resp ContainerStatusResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ContainerStatus", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) UpdateContainerResources(ctx context.Context, req *UpdateContainerResourcesRequest) (*UpdateContainerResourcesResponse, error) {
	var resp UpdateContainerResourcesResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "UpdateContainerResources", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ReopenContainerLog(ctx context.Context, req *ReopenContainerLogRequest) (*ReopenContainerLogResponse, error) {
	var resp ReopenContainerLogResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ReopenContainerLog", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ExecSync(ctx context.Context, req *ExecSyncRequest) (*ExecSyncResponse, error) {
	var resp ExecSyncResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ExecSync", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) Exec(ctx context.Context, req *ExecRequest) (*ExecResponse, error) {
	var resp ExecResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "Exec", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) Attach(ctx context.Context, req *AttachRequest) (*AttachResponse, error) {
	var resp AttachResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "Attach", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) PortForward(ctx context.Context, req *PortForwardRequest) (*PortForwardResponse, error) {
	var resp PortForwardResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "PortForward", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ContainerStats(ctx context.Context, req *ContainerStatsRequest) (*ContainerStatsResponse, error) {
	var resp ContainerStatsResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ContainerStats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ListContainerStats(ctx context.Context, req *ListContainerStatsRequest) (*ListContainerStatsResponse, error) {
	var resp ListContainerStatsResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ListContainerStats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) PodSandboxStats(ctx context.Context, req *PodSandboxStatsRequest) (*PodSandboxStatsResponse, error) {
	var resp PodSandboxStatsResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "PodSandboxStats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ListPodSandboxStats(ctx context.Context, req *ListPodSandboxStatsRequest) (*ListPodSandboxStatsResponse, error) {
	var resp ListPodSandboxStatsResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ListPodSandboxStats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) UpdateRuntimeConfig(ctx context.Context, req *UpdateRuntimeConfigRequest) (*UpdateRuntimeConfigResponse, error) {
	var resp UpdateRuntimeConfigResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "UpdateRuntimeConfig", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) Status(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	var resp StatusResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "Status", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) CheckpointContainer(ctx context.Context, req *CheckpointContainerRequest) (*CheckpointContainerResponse, error) {
	var resp CheckpointContainerResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "CheckpointContainer", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) GetContainerEvents(ctx context.Context, req *GetEventsRequest) (RuntimeService_GetContainerEventsClient, error) {
	stream, err := c.client.NewStream(ctx, &ttrpc.StreamDesc{
		StreamingClient: false,
		StreamingServer: true,
	}, "runtime.v1.RuntimeService", "GetContainerEvents", req)
	if err != nil {
		return nil, err
	}
	x := &runtimeserviceGetContainerEventsClient{stream}
	return x, nil
}

type RuntimeService_GetContainerEventsClient interface {
	Recv() (*ContainerEventResponse, error)
	ttrpc.ClientStream
}

type runtimeserviceGetContainerEventsClient struct {
	ttrpc.ClientStream
}

func (x *runtimeserviceGetContainerEventsClient) Recv() (*ContainerEventResponse, error) {
	m := new(ContainerEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeserviceClient) ListMetricDescriptors(ctx context.Context, req *ListMetricDescriptorsRequest) (*ListMetricDescriptorsResponse, error) {
	var resp ListMetricDescriptorsResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ListMetricDescriptors", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) ListPodSandboxMetrics(ctx context.Context, req *ListPodSandboxMetricsRequest) (*ListPodSandboxMetricsResponse, error) {
	var resp ListPodSandboxMetricsResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "ListPodSandboxMetrics", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *runtimeserviceClient) RuntimeConfig(ctx context.Context, req *RuntimeConfigRequest) (*RuntimeConfigResponse, error) {
	var resp RuntimeConfigResponse
	if err := c.client.Call(ctx, "runtime.v1.RuntimeService", "RuntimeConfig", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

type ImageServiceService interface {
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	ImageStatus(context.Context, *ImageStatusRequest) (*ImageStatusResponse, error)
	PullImage(context.Context, *PullImageRequest) (*PullImageResponse, error)
	RemoveImage(context.Context, *RemoveImageRequest) (*RemoveImageResponse, error)
	ImageFsInfo(context.Context, *ImageFsInfoRequest) (*ImageFsInfoResponse, error)
}

func RegisterImageServiceService(srv *ttrpc.Server, svc ImageServiceService) {
	srv.RegisterService("runtime.v1.ImageService", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"ListImages": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ListImagesRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ListImages(ctx, &req)
			},
			"ImageStatus": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ImageStatusRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ImageStatus(ctx, &req)
			},
			"PullImage": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req PullImageRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PullImage(ctx, &req)
			},
			"RemoveImage": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RemoveImageRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RemoveImage(ctx, &req)
			},
			"ImageFsInfo": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req ImageFsInfoRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ImageFsInfo(ctx, &req)
			},
		},
	})
}

type imageserviceClient struct {
	client *ttrpc.Client
}

func NewImageServiceClient(client *ttrpc.Client) ImageServiceService {
	return &imageserviceClient{
		client: client,
	}
}

func (c *imageserviceClient) ListImages(ctx context.Context, req *ListImagesRequest) (*ListImagesResponse, error) {
	var resp ListImagesResponse
	if err := c.client.Call(ctx, "runtime.v1.ImageService", "ListImages", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *imageserviceClient) ImageStatus(ctx context.Context, req *ImageStatusRequest) (*ImageStatusResponse, error) {
	var resp ImageStatusResponse
	if err := c.client.Call(ctx, "runtime.v1.ImageService", "ImageStatus", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *imageserviceClient) PullImage(ctx context.Context, req *PullImageRequest) (*PullImageResponse, error) {
	var resp PullImageResponse
	if err := c.client.Call(ctx, "runtime.v1.ImageService", "PullImage", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *imageserviceClient) RemoveImage(ctx context.Context, req *RemoveImageRequest) (*RemoveImageResponse, error) {
	var resp RemoveImageResponse
	if err := c.client.Call(ctx, "runtime.v1.ImageService", "RemoveImage", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *imageserviceClient) ImageFsInfo(ctx context.Context, req *ImageFsInfoRequest) (*ImageFsInfoResponse, error) {
	var resp ImageFsInfoResponse
	if err := c.client.Call(ctx, "runtime.v1.ImageService", "ImageFsInfo", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
